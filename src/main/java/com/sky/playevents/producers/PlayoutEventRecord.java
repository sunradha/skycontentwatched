package com.sky.playevents.producers; /**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class PlayoutEventRecord extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -2410942824835527314L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"com.sky.playevents.producers.PlayoutEventRecord\",\"fields\":[{\"name\":\"eventTimestamp\",\"type\":\"long\"},{\"name\":\"sessionId\",\"type\":\"string\"},{\"name\":\"event\",\"type\":\"string\"},{\"name\":\"userId\",\"type\":[\"string\",\"null\"],\"default\":\"None\"},{\"name\":\"contentId\",\"type\":[\"string\",\"null\"],\"default\":\"None\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  public long eventTimestamp;
  public CharSequence sessionId;
  public CharSequence event;
  public CharSequence userId;
  public CharSequence contentId;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public PlayoutEventRecord() {}

  /**
   * All-args constructor.
   * @param eventTimestamp The new value for eventTimestamp
   * @param sessionId The new value for sessionId
   * @param event The new value for event
   * @param userId The new value for userId
   * @param contentId The new value for contentId
   */
  public PlayoutEventRecord(Long eventTimestamp, CharSequence sessionId, CharSequence event, CharSequence userId, CharSequence contentId) {
    this.eventTimestamp = eventTimestamp;
    this.sessionId = sessionId;
    this.event = event;
    this.userId = userId;
    this.contentId = contentId;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public Object get(int field$) {
    switch (field$) {
    case 0: return eventTimestamp;
    case 1: return sessionId;
    case 2: return event;
    case 3: return userId;
    case 4: return contentId;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: eventTimestamp = (Long)value$; break;
    case 1: sessionId = (CharSequence)value$; break;
    case 2: event = (CharSequence)value$; break;
    case 3: userId = (CharSequence)value$; break;
    case 4: contentId = (CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'eventTimestamp' field.
   * @return The value of the 'eventTimestamp' field.
   */
  public Long getEventTimestamp() {
    return eventTimestamp;
  }

  /**
   * Sets the value of the 'eventTimestamp' field.
   * @param value the value to set.
   */
  public void setEventTimestamp(Long value) {
    this.eventTimestamp = value;
  }

  /**
   * Gets the value of the 'sessionId' field.
   * @return The value of the 'sessionId' field.
   */
  public CharSequence getSessionId() {
    return sessionId;
  }

  /**
   * Sets the value of the 'sessionId' field.
   * @param value the value to set.
   */
  public void setSessionId(CharSequence value) {
    this.sessionId = value;
  }

  /**
   * Gets the value of the 'event' field.
   * @return The value of the 'event' field.
   */
  public CharSequence getEvent() {
    return event;
  }

  /**
   * Sets the value of the 'event' field.
   * @param value the value to set.
   */
  public void setEvent(CharSequence value) {
    this.event = value;
  }

  /**
   * Gets the value of the 'userId' field.
   * @return The value of the 'userId' field.
   */
  public CharSequence getUserId() {
    return userId;
  }

  /**
   * Sets the value of the 'userId' field.
   * @param value the value to set.
   */
  public void setUserId(CharSequence value) {
    this.userId = value;
  }

  /**
   * Gets the value of the 'contentId' field.
   * @return The value of the 'contentId' field.
   */
  public CharSequence getContentId() {
    return contentId;
  }

  /**
   * Sets the value of the 'contentId' field.
   * @param value the value to set.
   */
  public void setContentId(CharSequence value) {
    this.contentId = value;
  }

  /**
   * Creates a new com.sky.playevents.producers.PlayoutEventRecord RecordBuilder.
   * @return A new com.sky.playevents.producers.PlayoutEventRecord RecordBuilder
   */
  public static Builder newBuilder() {
    return new Builder();
  }

  /**
   * Creates a new com.sky.playevents.producers.PlayoutEventRecord RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new com.sky.playevents.producers.PlayoutEventRecord RecordBuilder
   */
  public static Builder newBuilder(Builder other) {
    return new Builder(other);
  }

  /**
   * Creates a new com.sky.playevents.producers.PlayoutEventRecord RecordBuilder by copying an existing com.sky.playevents.producers.PlayoutEventRecord instance.
   * @param other The existing instance to copy.
   * @return A new com.sky.playevents.producers.PlayoutEventRecord RecordBuilder
   */
  public static Builder newBuilder(PlayoutEventRecord other) {
    return new Builder(other);
  }

  /**
   * RecordBuilder for com.sky.playevents.producers.PlayoutEventRecord instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<PlayoutEventRecord>
    implements org.apache.avro.data.RecordBuilder<PlayoutEventRecord> {

    private long eventTimestamp;
    private CharSequence sessionId;
    private CharSequence event;
    private CharSequence userId;
    private CharSequence contentId;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.eventTimestamp)) {
        this.eventTimestamp = data().deepCopy(fields()[0].schema(), other.eventTimestamp);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.sessionId)) {
        this.sessionId = data().deepCopy(fields()[1].schema(), other.sessionId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.event)) {
        this.event = data().deepCopy(fields()[2].schema(), other.event);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.userId)) {
        this.userId = data().deepCopy(fields()[3].schema(), other.userId);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.contentId)) {
        this.contentId = data().deepCopy(fields()[4].schema(), other.contentId);
        fieldSetFlags()[4] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing com.sky.playevents.producers.PlayoutEventRecord instance
     * @param other The existing instance to copy.
     */
    private Builder(PlayoutEventRecord other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.eventTimestamp)) {
        this.eventTimestamp = data().deepCopy(fields()[0].schema(), other.eventTimestamp);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.sessionId)) {
        this.sessionId = data().deepCopy(fields()[1].schema(), other.sessionId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.event)) {
        this.event = data().deepCopy(fields()[2].schema(), other.event);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.userId)) {
        this.userId = data().deepCopy(fields()[3].schema(), other.userId);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.contentId)) {
        this.contentId = data().deepCopy(fields()[4].schema(), other.contentId);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'eventTimestamp' field.
      * @return The value.
      */
    public Long getEventTimestamp() {
      return eventTimestamp;
    }

    /**
      * Sets the value of the 'eventTimestamp' field.
      * @param value The value of 'eventTimestamp'.
      * @return This builder.
      */
    public Builder setEventTimestamp(long value) {
      validate(fields()[0], value);
      this.eventTimestamp = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'eventTimestamp' field has been set.
      * @return True if the 'eventTimestamp' field has been set, false otherwise.
      */
    public boolean hasEventTimestamp() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'eventTimestamp' field.
      * @return This builder.
      */
    public Builder clearEventTimestamp() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'sessionId' field.
      * @return The value.
      */
    public CharSequence getSessionId() {
      return sessionId;
    }

    /**
      * Sets the value of the 'sessionId' field.
      * @param value The value of 'sessionId'.
      * @return This builder.
      */
    public Builder setSessionId(CharSequence value) {
      validate(fields()[1], value);
      this.sessionId = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'sessionId' field has been set.
      * @return True if the 'sessionId' field has been set, false otherwise.
      */
    public boolean hasSessionId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'sessionId' field.
      * @return This builder.
      */
    public Builder clearSessionId() {
      sessionId = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'event' field.
      * @return The value.
      */
    public CharSequence getEvent() {
      return event;
    }

    /**
      * Sets the value of the 'event' field.
      * @param value The value of 'event'.
      * @return This builder.
      */
    public Builder setEvent(CharSequence value) {
      validate(fields()[2], value);
      this.event = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'event' field has been set.
      * @return True if the 'event' field has been set, false otherwise.
      */
    public boolean hasEvent() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'event' field.
      * @return This builder.
      */
    public Builder clearEvent() {
      event = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'userId' field.
      * @return The value.
      */
    public CharSequence getUserId() {
      return userId;
    }

    /**
      * Sets the value of the 'userId' field.
      * @param value The value of 'userId'.
      * @return This builder.
      */
    public Builder setUserId(CharSequence value) {
      validate(fields()[3], value);
      this.userId = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'userId' field has been set.
      * @return True if the 'userId' field has been set, false otherwise.
      */
    public boolean hasUserId() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'userId' field.
      * @return This builder.
      */
    public Builder clearUserId() {
      userId = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'contentId' field.
      * @return The value.
      */
    public CharSequence getContentId() {
      return contentId;
    }

    /**
      * Sets the value of the 'contentId' field.
      * @param value The value of 'contentId'.
      * @return This builder.
      */
    public Builder setContentId(CharSequence value) {
      validate(fields()[4], value);
      this.contentId = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'contentId' field has been set.
      * @return True if the 'contentId' field has been set, false otherwise.
      */
    public boolean hasContentId() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'contentId' field.
      * @return This builder.
      */
    public Builder clearContentId() {
      contentId = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    public PlayoutEventRecord build() {
      try {
        PlayoutEventRecord record = new PlayoutEventRecord();
        record.eventTimestamp = fieldSetFlags()[0] ? this.eventTimestamp : (Long) defaultValue(fields()[0]);
        record.sessionId = fieldSetFlags()[1] ? this.sessionId : (CharSequence) defaultValue(fields()[1]);
        record.event = fieldSetFlags()[2] ? this.event : (CharSequence) defaultValue(fields()[2]);
        record.userId = fieldSetFlags()[3] ? this.userId : (CharSequence) defaultValue(fields()[3]);
        record.contentId = fieldSetFlags()[4] ? this.contentId : (CharSequence) defaultValue(fields()[4]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
