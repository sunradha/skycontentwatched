package com.sky.playevents.producers; /**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class ContentWatchedRecord extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 8465109418406943686L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"com.sky.playevents.producers.ContentWatchedRecord\",\"fields\":[{\"name\":\"startTimestamp\",\"type\":\"long\"},{\"name\":\"userId\",\"type\":[\"string\",\"null\"],\"default\":\"None\"},{\"name\":\"contentId\",\"type\":[\"string\",\"null\"],\"default\":\"None\"},{\"name\":\"timeWatched\",\"type\":\"long\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  public long startTimestamp;
  public CharSequence userId;
  public CharSequence contentId;
  public long timeWatched;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public ContentWatchedRecord() {}

  /**
   * All-args constructor.
   * @param startTimestamp The new value for startTimestamp
   * @param userId The new value for userId
   * @param contentId The new value for contentId
   * @param timeWatched The new value for timeWatched
   */
  public ContentWatchedRecord(Long startTimestamp, CharSequence userId, CharSequence contentId, Long timeWatched) {
    this.startTimestamp = startTimestamp;
    this.userId = userId;
    this.contentId = contentId;
    this.timeWatched = timeWatched;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public Object get(int field$) {
    switch (field$) {
    case 0: return startTimestamp;
    case 1: return userId;
    case 2: return contentId;
    case 3: return timeWatched;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: startTimestamp = (Long)value$; break;
    case 1: userId = (CharSequence)value$; break;
    case 2: contentId = (CharSequence)value$; break;
    case 3: timeWatched = (Long)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'startTimestamp' field.
   * @return The value of the 'startTimestamp' field.
   */
  public Long getStartTimestamp() {
    return startTimestamp;
  }

  /**
   * Sets the value of the 'startTimestamp' field.
   * @param value the value to set.
   */
  public void setStartTimestamp(Long value) {
    this.startTimestamp = value;
  }

  /**
   * Gets the value of the 'userId' field.
   * @return The value of the 'userId' field.
   */
  public CharSequence getUserId() {
    return userId;
  }

  /**
   * Sets the value of the 'userId' field.
   * @param value the value to set.
   */
  public void setUserId(CharSequence value) {
    this.userId = value;
  }

  /**
   * Gets the value of the 'contentId' field.
   * @return The value of the 'contentId' field.
   */
  public CharSequence getContentId() {
    return contentId;
  }

  /**
   * Sets the value of the 'contentId' field.
   * @param value the value to set.
   */
  public void setContentId(CharSequence value) {
    this.contentId = value;
  }

  /**
   * Gets the value of the 'timeWatched' field.
   * @return The value of the 'timeWatched' field.
   */
  public Long getTimeWatched() {
    return timeWatched;
  }

  /**
   * Sets the value of the 'timeWatched' field.
   * @param value the value to set.
   */
  public void setTimeWatched(Long value) {
    this.timeWatched = value;
  }

  /**
   * Creates a new com.sky.playevents.producers.ContentWatchedRecord RecordBuilder.
   * @return A new com.sky.playevents.producers.ContentWatchedRecord RecordBuilder
   */
  public static Builder newBuilder() {
    return new Builder();
  }

  /**
   * Creates a new com.sky.playevents.producers.ContentWatchedRecord RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new com.sky.playevents.producers.ContentWatchedRecord RecordBuilder
   */
  public static Builder newBuilder(Builder other) {
    return new Builder(other);
  }

  /**
   * Creates a new com.sky.playevents.producers.ContentWatchedRecord RecordBuilder by copying an existing com.sky.playevents.producers.ContentWatchedRecord instance.
   * @param other The existing instance to copy.
   * @return A new com.sky.playevents.producers.ContentWatchedRecord RecordBuilder
   */
  public static Builder newBuilder(ContentWatchedRecord other) {
    return new Builder(other);
  }

  /**
   * RecordBuilder for com.sky.playevents.producers.ContentWatchedRecord instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<ContentWatchedRecord>
    implements org.apache.avro.data.RecordBuilder<ContentWatchedRecord> {

    private long startTimestamp;
    private CharSequence userId;
    private CharSequence contentId;
    private long timeWatched;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.startTimestamp)) {
        this.startTimestamp = data().deepCopy(fields()[0].schema(), other.startTimestamp);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.userId)) {
        this.userId = data().deepCopy(fields()[1].schema(), other.userId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.contentId)) {
        this.contentId = data().deepCopy(fields()[2].schema(), other.contentId);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.timeWatched)) {
        this.timeWatched = data().deepCopy(fields()[3].schema(), other.timeWatched);
        fieldSetFlags()[3] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing com.sky.playevents.producers.ContentWatchedRecord instance
     * @param other The existing instance to copy.
     */
    private Builder(ContentWatchedRecord other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.startTimestamp)) {
        this.startTimestamp = data().deepCopy(fields()[0].schema(), other.startTimestamp);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.userId)) {
        this.userId = data().deepCopy(fields()[1].schema(), other.userId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.contentId)) {
        this.contentId = data().deepCopy(fields()[2].schema(), other.contentId);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.timeWatched)) {
        this.timeWatched = data().deepCopy(fields()[3].schema(), other.timeWatched);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'startTimestamp' field.
      * @return The value.
      */
    public Long getStartTimestamp() {
      return startTimestamp;
    }

    /**
      * Sets the value of the 'startTimestamp' field.
      * @param value The value of 'startTimestamp'.
      * @return This builder.
      */
    public Builder setStartTimestamp(long value) {
      validate(fields()[0], value);
      this.startTimestamp = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'startTimestamp' field has been set.
      * @return True if the 'startTimestamp' field has been set, false otherwise.
      */
    public boolean hasStartTimestamp() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'startTimestamp' field.
      * @return This builder.
      */
    public Builder clearStartTimestamp() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'userId' field.
      * @return The value.
      */
    public CharSequence getUserId() {
      return userId;
    }

    /**
      * Sets the value of the 'userId' field.
      * @param value The value of 'userId'.
      * @return This builder.
      */
    public Builder setUserId(CharSequence value) {
      validate(fields()[1], value);
      this.userId = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'userId' field has been set.
      * @return True if the 'userId' field has been set, false otherwise.
      */
    public boolean hasUserId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'userId' field.
      * @return This builder.
      */
    public Builder clearUserId() {
      userId = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'contentId' field.
      * @return The value.
      */
    public CharSequence getContentId() {
      return contentId;
    }

    /**
      * Sets the value of the 'contentId' field.
      * @param value The value of 'contentId'.
      * @return This builder.
      */
    public Builder setContentId(CharSequence value) {
      validate(fields()[2], value);
      this.contentId = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'contentId' field has been set.
      * @return True if the 'contentId' field has been set, false otherwise.
      */
    public boolean hasContentId() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'contentId' field.
      * @return This builder.
      */
    public Builder clearContentId() {
      contentId = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'timeWatched' field.
      * @return The value.
      */
    public Long getTimeWatched() {
      return timeWatched;
    }

    /**
      * Sets the value of the 'timeWatched' field.
      * @param value The value of 'timeWatched'.
      * @return This builder.
      */
    public Builder setTimeWatched(long value) {
      validate(fields()[3], value);
      this.timeWatched = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'timeWatched' field has been set.
      * @return True if the 'timeWatched' field has been set, false otherwise.
      */
    public boolean hasTimeWatched() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'timeWatched' field.
      * @return This builder.
      */
    public Builder clearTimeWatched() {
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    public ContentWatchedRecord build() {
      try {
        ContentWatchedRecord record = new ContentWatchedRecord();
        record.startTimestamp = fieldSetFlags()[0] ? this.startTimestamp : (Long) defaultValue(fields()[0]);
        record.userId = fieldSetFlags()[1] ? this.userId : (CharSequence) defaultValue(fields()[1]);
        record.contentId = fieldSetFlags()[2] ? this.contentId : (CharSequence) defaultValue(fields()[2]);
        record.timeWatched = fieldSetFlags()[3] ? this.timeWatched : (Long) defaultValue(fields()[3]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
